includeScript("_debug")
var bDetected,sType,sName,sVersion,sOptions
function define(t,e){if(!t)_error("No input type.")
sType=t
sName=e
sVersion=arguments[2]?arguments[2]:""
sOptions=arguments[3]?arguments[3]:""
bDetected=false}var init=define
var visualDieOutputFix=false
if(visualDieOutputFix){var _setResult_original=_setResult
var _setResult_func=function(t,e,n,i){_setResult_original(t,e+(n||i)?" ":"",n,i)}
_setResult=_setResult_func}function result(){if(bDetected){_setResult(sType,sName,sVersion,sOptions)
bDetected=false}sName=sVersion=sOptions=""
var t=bDetected
bDetected=false
return t}String.prototype.append=function(){var t=this.valueOf(),e=","
if(arguments.length){if(t.length)t+=e
t+=Array.prototype.join.call(arguments,e)}return t}
String.prototype.appendS=function(t,e){var n=this.valueOf(),i=e||","
if(t){if(n.length)n+=i
n+=t}return n}
String.prototype.addIfNone=function(t){var e=this.valueOf()
if(t&&e.indexOf(t)<0)e+=t
return e}
String.prototype.beginsWith=function(t,e){var n=typeof e=="number"?Math.min(t.length,e):0
if(t.length>this.length-n)return false
else return this.slice(n,t.length)==t}
String.prototype.beginsWithCI=function(t,e){return this.toLowerCase().beginsWith(t.toLowerCase(),e)}
String.prototype.endsWith=function(t,e){var n=typeof e=="number"?Math.min(this.length,e):this.length
if(t.length>n)return false
else return this.slice(n-t.length,n)==t}
String.prototype.endsWithCI=function(t,e){return this.toLowerCase().endsWith(t.toLowerCase(),e)}
String.prototype.repeat=function(t){if(typeof t!=="number")return this
var e=this
for(var n=1;n<t;n++)e+=this
return e}
String.prototype.padStart=function(t,e){var n=this.valueOf()
t>>=0
e=String(e||" ")
if(n.length>=t){return String(n)}t-=n.length
if(t>e.length){e+=e.repeat(Math.ceil(t/e.length))}return e.slice(0,t)+String(n)}
Number.prototype.padStart=function(t,e){var n=this.valueOf().toString()
t>>=0
e=String(e||" ")
if(n.length>=t)return n
t-=n.length
if(t>e.length){e+=e.repeat(Math.ceil(t/e.length))}return e.slice(0,t)+n}
Number.prototype.clamp=function(t,e){return Math.min(Math.max(this,t),e)}
includeScript("language")
