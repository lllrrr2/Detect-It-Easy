init("audio","Creative (Sound Blaster) Voice waveform (.VOC)")
function detect(){bad=""
if(!X.c("'Creative Voice File'1A"))if(X.c("'Creative Voice File'..1A"))bad=bad.addIfNone("!bad1Asig")
else return false
nV=X.U16(22)
if((~nV+4660&65535)!=X.U16(24))return false
codec="<default codec>"
function e(e){switch(e){case 0:codec="8-bit uPCM"
break
case 1:codec="Creative 8 to 4-bit ADPCM"
break
case 2:codec="Creative 8 to 3-bit ADPCM"
break
case 3:codec="Creative 8 to 2-bit ADPCM"
break
case 4:codec="16-bit sPCM"
break
case 5:codec="CCITT a-Law"
break
case 6:codec="CCITT u-Law"
break
case 8192:codec="Creative 16 to 4-bit ADPCM"
break
default:codec="invalid codec "+Hex(e)}return codec}sV=nV.toString(16).padStart(4,"0")
sVersion="v"+sV[1]+"."+sV.slice(2,4)
bn=sz=-1
extended=z=false
p=26
rate=Hz=bps=bCodec=0
info=[]
while(p<(X.isDeepScan()?X.Sz():65535)&&!z){bst=p
bhd=X.U8(p++)
bn++
bsz=X.U24(p)
p+=3
at=""
switch(bhd){case 0:info.push(at+"EoF")
p-=3
z=true
break
case 1:if(!extended){rate=1e6/(256-X.U8(p))
Hz=rate<1e5?Math.round(rate)+"Hz":(rate/1e3).toFixed(1)+"kHz"
bCodec=X.U8(p+1)}info.push(at+"audio data in "+codec+" at "+Hz)
p+=bsz
break
case 2:p+=bsz
break
case 3:len=X.U16(p)+1
rate=1e6/(256-X.U8(p+2))
Hz=rate<1e5?Math.round(rate)+"Hz":(rate/1e3).toFixed(1)+"kHz"
info.push(at+"silence ("+(len/rate).toFixed(2)+" sec at "+Hz+")")
p+=bsz
break
case 4:info.push(at+"marker #"+X.U16(p))
p+=bsz
break
case 5:s=X.SA(p,bsz)
p+=bsz
info.push(at+'"'+s+'"')
break
case 6:n=X.U16(p)
p+=bsz
info.push(at+(n==65535?"infinite":n)+" repeats { ")
break
case 7:info.push(at+"end repeat }")
break
case 8:if(!extended){chn=X.U8(p+3)+1
rate=256e6/(chn*(65536-X.U16(p)))
Hz=rate<1e5?Math.round(rate)+"Hz":(rate/1e3).toFixed(1)+"kHz"
bCodec=X.U8(p+2)}extended=true
p+=bsz
info.push(at+"set to "+e(bCodec)+" at "+Hz+", "+chn+"chn")
break
case 9:if(nV<274)bad=bad.addIfNone("!badver")
rate=X.U32(p)
if(!rate)bad=bad.addIfNone("!badrate@"+Hex(bst))
z=true
break
Hz=rate<1e5?rate+"Hz":(rate/1e3).toFixed(1)+"kHz"
bps=X.U8(p+4)
chn=X.U8(p+5)
bCodec=X.U16(p+6)
info.push(at+"audio in "+bps+"bps "+e(bCodec)+" at "+Hz+", "+chn+"chn ")
p+=bsz
break
default:bad=bad.addIfNone("!invalidblock@"+Hex(bst))
z=true}if(p==X.Sz())z=true
if(X.isDeepScan())if(p>X.Sz())bad=bad.addIfNone("!short")
else sz=p}bDetected=true
if(bad!="")sVersion=sVersion.appendS("malformed"+addEllipsis(bad,128,64),"/")
if(X.isVerbose()){sOption(addEllipsis(info.join("; "),512,256))
sOption(outSz(sz),"sz:")}return result()}