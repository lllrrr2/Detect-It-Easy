init("format","")
includeScript("zlib")
function detect(){if(Binary.getSize()>=32){if(Binary.compare("'IDA'..0000")&&Binary.compare("DDCCBBAA",26)){var e=Binary.read_uint16(30)
sVersion=e+".0"
switch(Binary.getString(0,4)){case"IDA0":bDetected=true
sName="IDA Database (.IDB)"
break
case"IDA1":bDetected=true
sName="IDA Database for 32-bit binary (.IDB)"
break
case"IDA2":bDetected=true
sName="IDA Database for 64-bit binary (.I64)"
break}if(bDetected){switch(e){case 2:detect_zlib(Binary,Binary.read_uint32(6)+5)
break
case 3:detect_zlib(Binary,Binary.read_uint32(6)+5)
break
case 4:detect_zlib(Binary,Binary.read_uint32(6)+5)
break
case 5:detect_zlib(Binary,Binary.read_uint32(6)+9)
break
case 6:detect_zlib(Binary,Binary.read_uint32(6)+9)
break}}}else if(Binary.compare("'IDASGN'")){bDetected=true
sName="IDA FLIRT Signature Database (.SIG)"
var e=Binary.read_uint8(6)
var a=Binary.read_uint16(18)
var i=Binary.read_uint8(16)
var r=Binary.read_uint8(34)
var t=37
sVersion="v"+e
if(!a){a=Binary.read_uint32(37)
t+=4
if(e>=10){t+=4}}sOptions='"'+Binary.getString(t,r)+'"'
if(Binary.isVerbose()){detect_zlib(Binary,t+r)
sOption("modules:"+a)
sOption("p:"+Binary.read_uint8(7))
sOption("a:"+Binary.read_uint16(14))
sOption("o:"+Binary.read_uint16(12))
sOption("f:"+Binary.read_uint32(8))}}else if(Binary.compare("'IDATIL'")){bDetected=true
sName="IDA Type Information List (.TIL)"
sOptions='"'+Binary.getString(15,Binary.read_uint8(14))+'"'}}return result()}