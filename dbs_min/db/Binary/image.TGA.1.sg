init("image","Truevision Advanced Raster Graphics Adapter bitmap (.TGA,.ICB,.VDA,.VST)")
function detect(){if(File.getSize()<18)return false
var e=bad="",a=File.read_uint8(0),r=File.read_uint8(1),s=0,t=0,n=File.read_uint8(2),l=File.read_uint8(16),f="",u="none"
if((l<1||l>=17)&&l!=24&&l!=32)return false
switch(n){case 1:if(!r)return
f="pseudo"
if(File.isVerbose())sOption("colormap")
break
case 2:if(File.isVerbose())sOption("RGB")
s="24bit"
break
case 3:if(File.isVerbose())sOption("monochrome")
break
case 9:if(!r)return
u="rle"
f="pseudo"
if(File.isVerbose())sOption("RLE colormap")
break
case 10:u="rle"
if(File.isVerbose())sOption("RLE RGB")
s="24bit"
break
case 11:u="rle"
if(File.isVerbose())sOption("RLE monochrome")
break
case 32:if(!r)return
u="hdr"
f="pseudo"
if(File.isVerbose())sOption("H/d/RLE colormap")
break
case 33:if(!r)return
u="hdrq"
f="pseudo"
if(File.isVerbose())sOption("H/d/RLE 4-pass colormap")
break
default:return}var o=0,d=File.read_uint16(3),F=File.read_uint16(5),b=File.read_uint8(7),c=File.read_uint16(8),_=File.read_uint16(10),m=File.read_uint16(12),g=File.read_uint16(14),k=File.read_uint8(17)
if(!m||!g||m>4096||g>2048||c>1600||_>1200||b>32||k&192)return false
if(c)o++
if(_)o++
if(m<4)o++
if(g<4)o++
if(m>1600)o++
if(g>1200)o++
if(k&16)o++
if(!b&&F)return false
if(r==1&&(n==2||n==10))o++
if(b<15||isWithin(b,17,23)||isWithin(b,25,31))o++
if(F>256)o++
if(d)o++
if(n==2||n==10){if(d)o++
if(F)o++
if(b)o++}if(n!=1&&n!=9&&n!=32&&n!=33)t=l<=8?8:l<=16?5:8
else t=b<=8?8:b<=16?5:8
var s=1<<t
if(f=="pseudo")if(r)s=d+F
else{s=1<<l
if(s>File.getSize())return}p=18
if(a)e=File.read_ansiString(p,a)
p+=a
if(r){if(s<d)s=d
switch(b){case 8:default:p+=s
break
case 15:case 16:p+=s*2
break
case 24:p+=s*3
break
case 32:p+=s*4
break}}if(F>s)o++
if(o>3){return}var V=base=flag=skip=index=runlen=ofs=0,S=1
if((k&192)>>6==2)S=2
if(u!="hdr"&&u!="hdrq")for(var v=0;v<g&&p<File.getSize();v++){for(var x=0;x<m&&p<File.getSize();x++){if(u=="rle")if(runlen){runlen--
skip=flag!=0}else{runlen=File.read_uint8(p++)
skip=0
flag=runlen&128
if(flag)runlen-=128}if(!skip)switch(l){case 1:if(!(x&7))p++
break
case 8:default:p++
break
case 15:case 16:p+=2
break
case 24:p+=3
break
case 32:p+=4
break}}}else p=0
ofs+=S
if(ofs>m){base++
ofs=base}if(p>File.getSize())if(File.isHeuristicScan())bad=bad.addIfNone("!short")
else return
ea=0
if(File.isHeuristicScan()){ext=File.findSignature(p,4096,"'TRUEVISION-XFILE.'00")
if(ext>0){function O(){ea=File.read_uint32(ext-8)
var e=File.read_uint32(ext-4)
if(p>ext-8||ea&&p>ea||e&&p>e||(e||ea)&&ea==e||ea&&ea+File.read_uint16(ea)>ext||e&&ea&&ea<e&&ea+File.read_uint16(ea)>e)return false
if(e){var a=File.read_uint16(e)
var r=a*10+2
if(e+r>ext||ea&&e+r>ea)return false
for(i=0;i<a;i++){var s=File.read_uint32(e+4+i*10),t=File.read_uint32(e+8+i*10)
if(s+t>ext||s+t<p)return false}}if(ea){if(File.read_uint16(ea)==495)sV="v2.0"
else sV="v2.x"
auth=File.read_ansiString(ea+2,41)
xmsg=File.read_ansiString(ea+43,324)
timestamp=File.read_uint16(ea+371)+"-"+File.read_uint16(ea+369)+"-"+File.read_uint16(ea+367)+" "+File.read_uint16(ea+373)+":"+File.read_uint16(ea+375)+":"+File.read_uint16(ea+377)
sw=File.read_ansiString(ea+426,41).trim()+" v"+Math.floor(File.read_uint16(ea+467)/100).toString()+"."+(File.read_uint16(ea+467)%100).toString()+File.read_ansiString(ea+469,1),gamma=(File.read_uint16(ea+478)/File.read_uint16(ea+480)).toFixed(1)}else sV="v2.x"
return true}if(O()){sVersion=sV
p=ext+18}}else sVersion="v1.x"}else sVersion="v1.x"
if(File.isVerbose()){sOption(m+"x"+g+" ("+c+","+_+")")
sOption(l,"bpp:")
if(l<24)sOption(s,"colours:")
if(ea){sOption(gamma,"gamma:")
sOptionT(auth,"by:")
sOption(timestamp,"on:")
sOption(sw,"in:")
sOption(xmsg)}if(u!="rle"||File.isDeepScan())sOption(outSz(p),"sz:")}if(bad!="")sVersion+="/malformed"+bad
bDetected=true
return result()}