init("compiler","Borland Delphi")
includeScript("Borland")
function getVersion(){if(PE.isNET()){if(PE.isNetObjectPresent("Borland.Vcl.Types")){sVersion="8"}else if(PE.isNetObjectPresent("Borland.Eco.Interfaces")){sVersion="8 Eco WinForm"}else if(PE.isNetObjectPresent("Borland.Delphi.System")&&PE.isNetObjectPresent("WinForm")){sVersion="8 WinForm"}else if(PE.isNetObjectPresent("Borland.Delphi.Units")){sVersion="2005 for .NET"}else if(PE.isNetObjectPresent("Borland.Studio.Delphi")){sName="Embarcadero Delphi"
sVersion="XE*"
sOptions=".NET"}else{return 0}return 1}var e=PE.section[0].FileOffset,s=PE.section[0].FileSize,i=e,r=s,t,n,o,a,E=0
var f=PE.isPEPlus()?8:4
while(r>0){i=PE.findSignature(i,r,"0708'TControl'")
if(i==-1){break}n=PE.readDword(i+10)
t=PE.VAToOffset(n)
if(t!=-1){if(t>=e&&t<e+s){o=PE.readDword(t-10*f)
a=PE.readDword(t-10*f-11*f)
switch(o){case 0:if(a==1953384711){sVersion="3"}else if(a==1330906996){sVersion="2"}break
case 180:sVersion="C++ Builder"
break
case 276:sVersion="4"
break
case 288:sVersion="5"
break
case 296:sVersion="6 CLX"
break
case 300:sVersion="7 CLX"
break
case 312:sVersion="Kylix"
break
case 348:case 352:sVersion=a==1074790400||a==1048576?"7":"6"
break
case 356:sVersion="2005"
break
case 400:sVersion="2006"
break
default:o=PE.readDword(t-13*f)
if(o==420){sName="Embarcadero Delphi"
sVersion="2009"}else if(o==428){if(PE.resource["PACKAGEINFO"]){i=PE.resource["PACKAGEINFO"].Offset
r=PE.resource["PACKAGEINFO"].Size
if(PE.isSignaturePresent(i,r,"'ExcUtils'")){sName="Embarcadero Delphi"
sVersion="XE"}else if(PE.isSignaturePresent(i,r,"'StrUtils'")){sName="Embarcadero Delphi"
sVersion="2010"}else{sName="Embarcadero Delphi"
sVersion="2010 or XE"}}}else if(o==436){sName="Embarcadero Delphi"
sVersion="XE2-XE4"}else if(o==752||o==760){sName="Embarcadero Delphi"
sVersion="XE2"}else if(o==444){sName="Embarcadero Delphi"
sVersion="XE5-XE6"
E=1}else{if(f==8){o=PE.readDword(t-16*f)
if(o==760){sName="Embarcadero Delphi"
sVersion="XE3-X4"}else if(o==776){sName="Embarcadero Delphi"
sVersion="XE5-XE6"
E=1}}}}if(sVersion!=""&&!E){return 1}}}i++
r=s-(i-e+1)}if(PE.resource["PACKAGEINFO"]){i=PE.resource["PACKAGEINFO"].Offset
r=PE.resource["PACKAGEINFO"].Size
if(PE.isSignaturePresent(i,r,"'System.SysUtils'")){sName="Embarcadero Delphi"
sVersion="XE2-XE6"
E=1}else if(PE.isSignaturePresent(i,r,"'ExcUtils'")){sName="Embarcadero Delphi"
sVersion="XE"}else if(PE.isSignaturePresent(i,r,"'StrUtils'")){sName="Embarcadero Delphi"
sVersion="2009-2010"}else if(PE.isSignaturePresent(i,r,"'ImageHlp'")){sVersion="2006"}else if(PE.isSignaturePresent(i,r,"'SysInit'")){sVersion="6-7 or 2005"}if(sVersion!=""&&!E){return 1}}else{if(PE.findString(PE.section[0].FileOffset,PE.section[0].FileSize,"Borland\\Delphi")!=-1){sVersion="2-3"
return 1}}if(E){if(PE.section[".rdata"]){var l=PE.section[".rdata"].FileOffset,c=PE.section[".rdata"].FileSize,P=PE.findString(l,c,"Embarcadero Delphi for Win")
if(P!=-1){var d=PE.getString(P+46,4)
if(d=="28.0"){sVersion="XE7"}else if(d=="29.0"){sVersion="XE8"}else if(d=="30.0"){sVersion="10 Seattle"}else if(d=="31.0"){sVersion="10.1 Berlin"}else if(d=="32.0"){sVersion="10.2 Tokyo"}else if(d=="33.0"){sVersion="10.3 Rio"}else if(d=="34.0"){sVersion="10.4 Sydney"}else if(d=="35.0"){sVersion="11.0 Alexandria"}else if(d=="36.0"){sVersion="12.0 Athens"}else{sVersion="12.x Athens++"}}}return 1}return 0}function detect(){if(bBorlandC){return null}if(PE.resource["PACKAGEINFO"]){bDetected=true
getVersion()}if(PE.resource["DVCLAL"]){bDetected=true
getVersion()
nOffset=PE.getResourceNameOffset("DVCLAL")
if(PE.compare("A28CDF987B3C3A7926713F090F2A2517",nOffset)){sOptions="Professional"}else if(PE.compare("23785D23B6A5F31943F3400226D111C7",nOffset)){sOptions="Standard"}else if(PE.compare("263D4F38C28237B8F3244203179B3A83",nOffset)){sOptions="Enterprise"}}else if(PE.resource["TMAINFORM"]){bDetected=true
getVersion()}else if(PE.isNET()){if(getVersion()){bDetected=true}}else if(PE.compare("0A06'string'",PE.section[0].FileOffset)){sVersion="2"
bDetected=true}else if(PE.findSignature(PE.section[0].FileOffset,100,"07'Boolean'")!=-1){bDetected=true
getVersion()}else if(PE.findSignature(PE.section[0].FileOffset,100,"06'String'")!=-1){bDetected=true
getVersion()}else if(PE.findSignature(PE.section[0].FileOffset,256,"FF25........8BC0FF25........8BC0")){if(getVersion()){bDetected=true}}_setLang("Object Pascal (Delphi)",bDetected)
return result()}