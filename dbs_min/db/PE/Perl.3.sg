init("library","Perl5 xs")
function detect(){if(!PE.isDll())return
var e=PE.isLibraryPresentExp(/perl(5)_?(\d\d*)/i)
if(e){bDetected=true
sVersion=e[1]+"."+e[2]
_setLang("Perl",bDetected)}var r=PE.isExportFunctionPresentExp("Perl_sv_bless|perl_parse")
if(r){bDetected=true
sVersion="v"+getPerlVersion()
_setLang("Perl",bDetected)
return _setResult("library","Perl Runtime",sVersion,"")}return result()}function getPerlVersion(){const e=["'erl5'..'.dll'","'erl5'....'.dll'","'erl5_'..'.dll'","'erl5_'....'.dll'"]
var r=PE.getExportSection()
var t=String()
var i=0
var n=-1
for(var l=0;l<e.length;++l){n=PE.findSignature(PE.section[r].FileOffset,PE.getSize(),e[l])
if(n>-1)break}if(n>0){var s=PE.getString(n,12)
s=s.match(/(5)_?(\d\d*)/)
if(s){t=s[1]+"."+s[2]
i=Number(s[2])}else{return t}var a=i>9?"'5.' .. .. '.' .. ":"'5.' .. '.' .."
var P=findPatchVersion(a)
if(P>0)t+="."+P}return t}function findPatchVersion(e){var r=0
var t=PE.getSize()
var i=0
var n=-1
while((n=PE.findSignature(r,t,e))!=-1){var l=PE.getString(n,12)
r=n+l.length
l=l.match(/5\.\d\d*\.(\d\d*)/)
if(l&&l[1]>i)i=l[1]}return i}